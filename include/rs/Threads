#ifndef RS_THREADS_
#define RS_THREADS_

#ifdef _WIN32
#include <windows.h>
#else
#include <pthread.h>
#endif // _WIN32

#ifdef _WIN32
//   THREADS
#define RS_THREAD_T HANDLE
#define RS_THREAD_CANCEL(thread_handle) TerminateThread( thread_handle, 0)
#define RS_THREAD_CANCEL_TYPE(type)
#define RS_THREAD_CREATE(thread_handle, function, arg) *(thread_handle) = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)function, arg, 0, NULL)
#define RS_THREAD_JOIN(thread_handle) WaitForSingleObject(thread_handle, INFINITE)
#define RS_THREAD_ASYNCHRONOUS
//   MUTEX
#define RS_MUTEX_T HANDLE
#define RS_MUTEX_INIT(mutex) *mutex = CreateMutex(NULL, FALSE, NULL)
#define RS_MUTEX_DESTROY(mutex)
#define RS_MUTEX_LOCK(mutex) WaitForSingleObject(*mutex, INFINITE)
#define RS_MUTEX_UNLOCK(mutex) ReleaseMutex(*mutex)
//   COND
#define RS_COND_T HANDLE
#define RS_COND_ACTION(cond, mutex, action) action; SetEvent(*cond)
#define RS_COND_DESTROY(cond)
#define RS_COND_INIT(cond) *cond = CreateEvent(NULL, TRUE, TRUE, NULL); ResetEvent(*cond)
#define RS_COND_SIGNAL(cond) SetEvent(*cond)
#define RS_COND_WAIT(cond , mutex) ResetEvent(*cond); ReleaseMutex(*mutex); WaitForSingleObject(*cond, INFINITE)
#else
//   THREADS
#define RS_THREAD_T pthread_t
#define RS_THREAD_CANCEL(thread_handle) pthread_cancel(thread_handle)
#define RS_THREAD_CANCEL_TYPE(type) pthread_setcanceltype(type, NULL)
#define RS_THREAD_CREATE(thread_handle, function, arg) \
	while (pthread_create(thread_handle, NULL, function, (void*) arg) < 0) { \
		fprintf(stderr, "Error: pthread_create failed. Trying again...\n"); \
	}
#define RS_THREAD_JOIN(thread_handle) pthread_join(thread_handle, NULL)
#define RS_THREAD_ASYNCHRONOUS PTHREAD_CANCEL_ASYNCHRONOUS
//   MUTEX
#define RS_MUTEX_T pthread_mutex_t
#define RS_MUTEX_INIT(mutex) pthread_mutex_init(mutex, NULL)
#define RS_MUTEX_DESTROY(mutex) pthread_mutex_destroy(mutex)
#define RS_MUTEX_LOCK(mutex) \
	if (pthread_mutex_lock(mutex)) { \
		fprintf(stderr, "Error: pthread lock error: %s:%d\n", __FILE__, __LINE__); \
	}
#define RS_MUTEX_UNLOCK(mutex) pthread_mutex_unlock(mutex)
//   COND
#define RS_COND_T pthread_cond_t
#define RS_COND_ACTION(cond, mutex, action) pthread_mutex_lock(mutex); action; pthread_cond_signal(cond); pthread_mutex_unlock(mutex)
#define RS_COND_DESTROY(cond) pthread_cond_destroy(cond)
#define RS_COND_INIT(cond) pthread_cond_init(cond, NULL)
#define RS_COND_SIGNAL(cond) pthread_cond_signal(cond)
#define RS_COND_WAIT(cond, mutex) pthread_cond_wait(cond, mutex)
#endif

#endif // RS_THREADS_

