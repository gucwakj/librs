#ifndef RSRESEARCH_INTEGRATOR_
#define RSRESEARCH_INTEGRATOR_

#include <vector>

#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv2.h>

#include <rs/Vec>

namespace rsResearch {

	// integration struct
	struct Params {
		bool linearize;
		float a;
		float w1;
		float w2;
		short num_body;
		short num_robots;
		short num_vars;
		void *robot;
	};

	// class
	class LIBRSEXPORT Integrator {
		// public functions
		public:
			Integrator(void);
			virtual ~Integrator(void);

			void plot(std::string, bool = false);
			const rs::Vec* runStep(float);
			void setup(int(*)(double, const double*, double*, void*), struct Params*, float = 0.004);
			void setRecording(bool);
			void setTurn(float);

		// private data
		private:
			// integration
			double _time;					// time of integration
			Params *_params;				// all the parameters
			std::vector<double> _array;		// array of values from cpg integration
			gsl_odeiv2_driver *_driver;		// driver of cpg integration
			gsl_odeiv2_system _system;		// system of ode equations
			rs::Vec _v;						// array of output values

			// recording
			bool _rec_on;					// turn on recording
			std::vector<rs::Vec> _rec_v;	// recorded outputs
			std::vector<float> _rec_t;		// recorded times

			// turning
			float _turn;					// turn delta
	};

} // namespace rsResearch

#endif // RSRESEARCH_INTEGRATOR_

