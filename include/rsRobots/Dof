#ifndef RSROBOTS_DOF_
#define RSROBOTS_DOF_

#include <rsRobots/ModularRobot>

namespace rsDof {

	namespace Bodies {
		// parts
		enum Part {
			Body,
			Cap,
			Num_Parts
		};

		// joints
		enum Joint {
			Joint,
			Num_Joints
		};

		// faces
		enum Face {
			Face1 = 1,
			Face2,
			Face3,
			Num_Faces
		};
	} // namespace Bodies

	namespace Connectors {
		// types
		enum Type {
			None,
			El,
			Foot,
			Num_Connectors
		};

		// sides
		enum Side {
			Side1 = 1,
			Side2,
			Side3,
			Side4
		};
	} // namespace Connectors

} // namespace rsDof

namespace rsRobots {

	// class
	class LIBRSEXPORT Dof : virtual public ModularRobot {
		// public functions
		public:
			Dof(short);
			virtual ~Dof(void) {};

			short getEnabled(void);

		// inherited functions
		public:
			virtual const rs::Pos getConnBodyPosition(int, int, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getConnFacePosition(int, int, int, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getRobotCenterPosition(int, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getRobotFacePosition(int, const rs::Pos&, const rs::Quat&);

			virtual const rs::Quat getConnBodyQuaternion(int, int, const rs::Quat&);
			virtual const rs::Quat getConnFaceQuaternion(int, int, int, const rs::Quat&);
			virtual const rs::Quat getRobotBodyQuaternion(int, double, const rs::Quat&);
			virtual const rs::Quat getRobotCenterQuaternion(int, int, double, const rs::Quat&);

		// protected data
		protected:
			float _body_radius;
			float _cap_depth;
			float _cap_radius;
			float _el_length;
			short _enabled;
	};

} // namespace rsRobots

#endif // RSROBOTS_DOF_

