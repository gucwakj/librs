#ifndef RSROBOTS_LINKBOT_
#define RSROBOTS_LINKBOT_

#include <rsRobots/ModularRobot>

namespace rsLinkbot {

	namespace Bodies {
		// parts
		enum Part {
			Body,
			Cap1,
			Cap2,
			Cap3,
			Num_Parts
		};

		// joints
		enum Joint {
			Joint1,
			Joint2,
			Joint3,
			Num_Joints
		};

		// faces
		enum Face {
			Face1 = 1,
			Face2,
			Face3,
			Num_Faces
		};
	} // namespace Bodies

	namespace Connectors {
		// types
		enum Type {
			None,
			BigWheel,
			Bridge,
			Caster,
			Cube,
			DoubleBridge,
			Ell,
			Faceplate,
			Foot,
			Gripper,
			Omniplate,
			Simple,
			SmallWheel,
			TinyWheel,
			Wheel,
			Num_Connectors
		};

		// sides
		enum Side {
			Side1 = 1,
			Side2,
			Side3,
			Side4,
			Side5
		};
	} // namespace Connectors

	namespace Preconfigs {
		// types
		enum Type {
			Individual,
			Bow,
			Explorer,
			FourBotDrive,
			FourWheelDrive,
			FourWheelExplorer,
			GroupBow,
			Inchworm,
			Lift,
			Omnidrive,
			Snake,
			Stand,
			Num_Preconfig
		};
	} // namespace Preconfigs

} // namespace rsLinkbot

namespace rsRobots {

	// class
	class LIBRSEXPORT Linkbot : virtual public ModularRobot {
		// public functions
		public:
			Linkbot(int);
			virtual ~Linkbot(void) { };

			double getCasterScale(void);
			const rs::Quat tiltForWheels(int, int, double&);

		// inherited functions
		public:
			virtual const rs::Pos getConnBodyPosition(int, int, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getConnFacePosition(int, int, int, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getRobotCenterPosition(int, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getRobotFacePosition(int, const rs::Pos&, const rs::Quat&);

			virtual const rs::Quat getConnBodyQuaternion(int, int, const rs::Quat&);
			virtual const rs::Quat getConnFaceQuaternion(int, int, int, const rs::Quat&);
			virtual const rs::Quat getRobotBodyQuaternion(int, double, const rs::Quat&);
			virtual const rs::Quat getRobotCenterQuaternion(int, int, double, const rs::Quat&);

			virtual double getWheelRatio(int);

		// data
		protected:
			double _bigwheel_radius;
			double _bridge_length;
			double _body_radius;
			double _cubic_length;
			double _el_length;
			double _face_depth;
			double _face_radius;
			double _omni_length;
			double _smallwheel_radius;
			double _tinywheel_radius;
			int _disabled;
	};

} // namespace rsRobots

#endif // RSROBOTS_LINKBOT_

