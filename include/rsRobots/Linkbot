#ifndef RSROBOTS_LINKBOT_
#define RSROBOTS_LINKBOT_

#include <rsRobots/ModularRobot>

namespace rsLinkbot {

	namespace Bodies {
		// parts
		enum Part {
			Body,
			Cap1,
			Cap2,
			Cap3,
			Num_Parts
		};

		// joints
		enum Joint {
			Joint1,
			Joint2,
			Joint3,
			Num_Joints
		};

		// faces
		enum Face {
			Face1 = 1,
			Face2,
			Face3,
			Num_Faces
		};
	} // namespace Bodies

	namespace Connectors {
		// types
		enum Type {
			None,
			BigWheel,
			Bridge,
			Caster,
			Cube,
			DoubleBridge,
			Faceplate,
			Gripper,
			Omniplate,
			Simple,
			SmallWheel,
			TinyWheel,
			Wheel,
			Num_Connectors
		};

		// sides
		enum Side {
			Side1 = 1,
			Side2,
			Side3,
			Side4,
			Side5
		};
	} // namespace Connectors

	namespace Preconfigs {
		// types
		enum Type {
			Individual,
			Bow,
			Explorer,
			FourBotDrive,
			FourWheelDrive,
			FourWheelExplorer,
			GroupBow,
			Inchworm,
			Lift,
			Omnidrive,
			Snake,
			Stand,
			Num_Preconfig
		};
	} // namespace Preconfigs

} // namespace rsLinkbot

namespace rsRobots {

	// class
	class LIBRSEXPORT Linkbot : virtual public ModularRobot {
		// public functions
		public:
			Linkbot(short);
			virtual ~Linkbot(void) {};

			// getting
			float getBigWheelRadius(void)	{ return _bigwheel_radius;		};
			float getBodyRadius(void)		{ return _body_radius;			};
			float getBridgeLength(void)		{ return _bridge_length;		};
			float getCasterScale(void);
			float getCubicLength(void)		{ return _cubic_length;			};
			short getDisabled(void)			{ return _disabled;				};
			float getFaceDepth(void)		{ return _face_depth;			};
			float getFaceRadius(void)		{ return _face_radius;			};
			float getOmniLength(void)		{ return _omni_length;			};
			float getSmallWheelRadius(void)	{ return _smallwheel_radius;	};
			float getTinyWheelRadius(void)	{ return _tinywheel_radius;		};

			const rs::Quat tiltForWheels(short, short, float&);

		// inherited functions
		public:
			virtual const rs::Pos getConnBodyPosition(short, short, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getConnFacePosition(short, short, short, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getRobotCenterPosition(short, const rs::Pos&, const rs::Quat&);
			virtual const rs::Pos getRobotFacePosition(short, const rs::Pos&, const rs::Quat&);
			virtual const rs::Quat getConnBodyQuaternion(short, short, const rs::Quat&);
			virtual const rs::Quat getConnFaceQuaternion(short, short, short, const rs::Quat&);
			virtual const rs::Quat getRobotBodyQuaternion(short, float, const rs::Quat&);
			virtual const rs::Quat getRobotCenterQuaternion(short, short, float, const rs::Quat&);
			virtual float getWheelRatio(short);

		// private data
		private:
			float _bigwheel_radius;
			float _bridge_length;
			float _body_radius;
			float _cubic_length;
			float _face_depth;
			float _face_radius;
			float _omni_length;
			float _smallwheel_radius;
			float _tinywheel_radius;
			short _disabled;
	};

} // namespace rsRobots

#endif // RSROBOTS_LINKBOT_

