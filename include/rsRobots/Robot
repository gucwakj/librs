#ifndef RSROBOTS_ROBOT_
#define RSROBOTS_ROBOT_

#include <cmath>
#include <string>
#include <vector>

#include <rs/Enum>
#include <rs/Pos>
#include <rs/Quat>
#include <rs/Vec>

namespace rsRobots {

	// class
	class LIBRSEXPORT Robot {
		// public functions
		public:
			Robot(short);
			virtual ~Robot(void);

			void addBodyOffset(rs::Pos a)	{ _offset.push_back(a);	};

			// getting
			float getBodyHeight(void)		{ return _body_height;	};
			float getBodyLength(void)		{ return _body_length;	};
			float getBodyWidth(void)		{ return _body_width;	};
			rs::Pos getBodyOffset(int i)	{ return _offset[i];	};
			short getForm(void)				{ return _form;			};
			short getID(void)				{ return _id;			};
			std::string getName(void)		{ return _name;			};
			float* getRGB(void);
			float getRGB(short s)			{ return _rgb[s-1];		};
			const rs::Pos getRobotBodyPosition(short, const rs::Pos&, const rs::Quat&);
			bool getTrace(void)				{ return _trace;		};
			short getWheel(short s)			{ return _wheels[s];	};
			float getWheelDepth(void)		{ return _wheel_depth;	};
			short getWheelLeft(void)		{ return _wheels[0];	};
			float getWheelRadius(void)		{ return _wheel_radius;	};
			short getWheelRight(void)		{ return _wheels[1];	};

			// setting
			void setBodyHeight(float f)		{ _body_height = f;		};
			void setBodyLength(float f)		{ _body_length = f;		};
			void setBodyWidth(float f)		{ _body_width = f;		};
			void setID(short s)				{ _id = s;				};
			void setForm(short s)			{ _form = s;			};
			void setRGB(const rs::Vec&);
			void setName(std::string s)		{ _name = s;			};
			void setTrace(bool b)			{ _trace = b;			};
			void setWheelDepth(float f)		{ _wheel_depth = f;		};
			void setWheelLeft(short s)		{ _wheels[0] = s;		};
			void setWheelRadius(float f)	{ _wheel_radius = f;	};
			void setWheelRight(short s)		{ _wheels[1] = s;		};

		// virtual functions
		public:
			virtual const rs::Quat getRobotBodyQuaternion(short, float, const rs::Quat&) { return rs::Quat(); };
			virtual float getWheelRatio(int) { return 1; }

		// data
		private:
			bool _trace;
			float _body_length;
			float _body_height;
			float _body_width;
			float _wheel_depth;
			float _wheel_radius;
			float _rgb[3];
			short _form;
			short _id;
			short _wheels[2];
			std::string _name;
			std::vector<rs::Pos> _offset;
	};

} // namespace rsRobots

#endif // RSROBOTS_ROBOT_

