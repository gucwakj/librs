#ifndef RSSIM_LINKBOT_
#define RSSIM_LINKBOT_

#include <tuple>

#include <rsRobots/Linkbot>
#include <rsSim/ModularRobot>

namespace rsSim {

	// base class
	class Linkbot : virtual public rsRobots::Linkbot, virtual public ModularRobot {
		// public api
		public:
			Linkbot(int);
			virtual ~Linkbot(void);

			virtual int addConnector(int, int, int = rs::RIGHT, double = 0, int = 1, int = -1);
			void addForce(int, double, double, double);
			virtual void getCoM(double&, double&, double&);

		// inherited functions from ModularRobot class
		protected:
			virtual int build(const rs::Pos&, const rs::Quat&, const double*, dBodyID, int, int, int);

		// inherited functions from Robot class
		protected:
			virtual int build(const rs::Pos&, const rs::Quat&, const double*, int);
			virtual int buildIndividual(const rs::Pos&, const rs::Quat&, const double*);
			virtual double getAngle(int);
			virtual void init_params(void);
			virtual void simPreCollisionThread(void);
			virtual void simPostCollisionThread(void);

		// private functions
		private:
			void build_body(const rs::Pos&, const rs::Quat&);
			void build_bridge(Connector&);
			void build_caster(Connector&, int);
			void build_cube(Connector&);
			void build_doublebridge(Connector&);
			void build_face(int, const rs::Pos&, const rs::Quat&);
			void build_faceplate(Connector&);
			void build_gripper(Connector&, int);
			void build_omnidrive(Connector&);
			void build_simple(Connector&);
			void build_wheel(Connector&, double);

		// private variables
		private:
			std::vector<std::tuple<int, double, double, double>> _f;		// forces to add to bodies
	};

} // namespace rsSim

#endif // RSSIM_LINKBOT_

