#ifndef RSSIM_MODULARROBOT_HPP_
#define RSSIM_MODULARROBOT_HPP_

#include <rsRobots/ModularRobot>
#include <rsSim/Robot>

namespace rsSim {

	// connector struct
	struct Connector {
		dBodyID body;
		double o[3];
		int face, type;
		int d_side, d_type;
		int orientation;
	};

	// typedefs
	typedef std::vector<Connector> ConnectorList;

	// class
	class ModularRobot : virtual public rsRobots::ModularRobot, virtual public rsSim::Robot {
		// public functions
		public:
			ModularRobot(void);
			virtual ~ModularRobot(void);

			virtual int addConnector(int, int, int = rs::RIGHT, double = 0, int = 1, int = -1) = 0;
			virtual int build(const rs::Pos&, const rs::Quat&, const double*, dBodyID, int, int, int) = 0;
			dBodyID getConnectorBodyID(int);
			int getConnectorOrientation(int);
			ConnectorList& getConnectorList(void);

		// utility functions
		protected:
			int add_neighbor(ModularRobot*, int, int);
			int get_neighbor_count(int = -1, int = 0);
			double get_neighbor_force(int, int = 0);
			double get_neighbor_torque(int, int = 0);
			int fix_body_to_connector(dBodyID, int);
			int fix_connector_to_body(int, dBodyID, int = -1);

		// data members
		protected:
			// neighbors
			struct Neighbor {
				ModularRobot *robot;
				int face;
			};

			ConnectorList _conn;				// connectors
			std::vector<Neighbor> _neighbor;	// connected robots
			std::vector<dJointFeedback> _fb;	// feedback forces from joints
	};

} // namepsace rsSim

#endif // RSSIM_MODULARROBOT_HPP_

