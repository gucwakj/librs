#ifndef RSSIM_MODULARROBOT_
#define RSSIM_MODULARROBOT_

#include <rsRobots/ModularRobot>
#include <rsSim/Robot>

namespace rsSim {

	// connector struct
	struct Connector {
		dBodyID body;
		float o[3];
		short face, type;
		short d_side, d_type;
		short orientation;
	};

	// typedefs
	typedef std::vector<Connector> ConnectorList;

	// class
	class LIBRSEXPORT ModularRobot : virtual public rsRobots::ModularRobot, virtual public rsSim::Robot {
		// public functions
		public:
			ModularRobot(void) : rsRobots::Robot(rs::Robot) {};
			virtual ~ModularRobot(void) {};

			virtual int addConnector(int, int, int = rs::Right, double = 0, int = 1, int = -1) { return 0; };
			virtual int build(const rs::Pos&, const rs::Quat&, const rs::Vec&, dBodyID, int, int, int) { return 0; };
			virtual void calculateTrackwidth(void) { return; }
			dBodyID getConnectorBodyID(int);
			int getConnectorOrientation(int);
			ConnectorList& getConnectorList(void) { return _conn; };

		// protected functions
		protected:
			void fix_body_to_connector(dBodyID, short);
			void fix_connector_to_body(short, dBodyID, short = -1);

		// protected data
		protected:
			ConnectorList _conn;				// connectors
	};

} // namepsace rsSim

#endif // RSSIM_MODULARROBOT_

