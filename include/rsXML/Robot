#ifndef RSXML_ROBOT_
#define RSXML_ROBOT_

#include <string>
#include <vector>

#include <rs/Pos>
#include <rs/Quat>
#include <rs/Vec>
#include <rsRobots/Robot>
#include <rsXML/Conn>

namespace rsXML {

	// typedefs
	typedef std::vector<Conn*> ConnectorList;

	// class
	class LIBRSEXPORT Robot : virtual public rsRobots::Robot {
		// public functions
		public:
			Robot(bool);
			virtual ~Robot(void);

			int addConnector(Conn*);
			Conn* getBaseConnector(void);
			ConnectorList& getConnectorList(void);
			int getConnect(void);
			int getGround(void);
			int getID(void);
			const rs::Vec getJoints(void);
			const rs::Vec getLED(void);
			std::string getName(void);
			int getOrientation(void);
			const rs::Pos getPosition(void);
			const rs::Quat getQuaternion(void);
			bool getTrace(void);
			const rs::Vec getWheels(void);
			virtual void postProcess(void) {};
			void printDebug(void);
			void setConnect(int);
			void setGround(int);
			void setID(int);
			void setJoints(double, double);
			void setJoints(double, double, double);
			void setLED(double, double, double, double);
			void setName(std::string);
			void setOrientation(int);
			void setPosition(double, double, double);
			void setPsi(double);
			void setRotation(double, double, double);
			void setRotation(double, double, double, double);
			void setWheels(int, int);

		// protected data
		protected:
			int _connected;
			int _ground;
			int _id;
			int _orientation;
			int _trace;
			ConnectorList _conn;
			Conn *_base;
			rs::Pos _p;
			rs::Quat _q;
			rs::Vec _a;
			rs::Vec _c;
			rs::Vec _wheels;
			std::string _name;
	};

} // namespace rsXML

#endif // RSXML_ROBOT_

