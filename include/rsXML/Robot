#ifndef RSXML_ROBOT_
#define RSXML_ROBOT_

#include <string>
#include <vector>

#include <rs/Pos>
#include <rs/Quat>
#include <rs/Vec>
#include <rsRobots/Robot>
#include <rsXML/Conn>

namespace rsXML {

	// typedefs
	typedef std::vector<Conn*> ConnectorList;

	// class
	class LIBRSEXPORT Robot : virtual public rsRobots::Robot {
		// public functions
		public:
			Robot(bool);
			virtual ~Robot(void);

			short addConnector(Conn*);
			Conn* getBaseConnector(void);
			ConnectorList& getConnectorList(void);
			bool getConnect(void);
			short getEnabled(void);
			short getGround(void);
			short getID(void);
			const rs::Vec getJoints(void);
			const rs::Vec getLED(void);
			std::string getName(void);
			short getOrientation(void);
			const rs::Pos getPosition(void);
			const rs::Quat getQuaternion(void);
			short getShape(void);
			bool getTrace(void);
			const rs::Vec getWheels(void);
			virtual void postProcess(void) {};
			void printDebug(void);
			void setConnect(bool);
			void setEnabled(short);
			void setGround(short);
			void setID(short);
			void setJoints(float, float);
			void setJoints(float, float, float);
			void setLED(float, float, float, float);
			void setName(std::string);
			void setOrientation(short);
			void setPosition(float, float, float);
			void setPsi(float);
			void setRotation(float, float, float);
			void setRotation(float, float, float, float);
			void setWheels(short, short);

		// protected data
		protected:
			bool _trace;
			bool _connected;
			short _enabled;
			short _ground;
			short _id;
			short _orientation;
			short _shape;
			ConnectorList _conn;
			Conn *_base;
			rs::Pos _p;
			rs::Quat _q;
			rs::Vec _a;
			rs::Vec _c;
			rs::Vec _wheels;
			std::string _name;
	};

} // namespace rsXML

#endif // RSXML_ROBOT_

