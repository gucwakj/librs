#ifndef RSXML_WRITER_
#define RSXML_WRITER_

#include <string>
#include <vector>

#include <tinyxml2.h>

#include <rsXML/Robot>

namespace rsXML {

	// class
	class LIBRSEXPORT Writer {
		// public functions
		public:
			Writer(std::string, const std::string&);
			virtual ~Writer(void);

			bool deleteMarker(int id);
			bool deleteObstacle(int id);
			bool deleteRobot(int id);
			tinyxml2::XMLElement* getOrCreateChild(tinyxml2::XMLElement*, const char*);
			tinyxml2::XMLElement* getOrCreateConnector(int, int);
			tinyxml2::XMLElement* getOrCreateElement(const char*, const char*);
			tinyxml2::XMLElement* getOrCreateMarker(int, int);
			tinyxml2::XMLElement* getOrCreateObstacle(int, int);
			tinyxml2::XMLElement* getOrCreatePreconfig(int, int, int);
			tinyxml2::XMLElement* getOrCreateRobot(int, int);
			tinyxml2::XMLElement* getOrCreateSide(tinyxml2::XMLElement*, const char*, int);
			void reidRobot(tinyxml2::XMLElement*);
			int save(void);
			int saveFile(std::string);
			void setBackground(std::string);
			void setConnectorSide(tinyxml2::XMLElement*, int, int, int, int, double = 0);
			void setGrid(std::vector<double>);
			void setMarker(tinyxml2::XMLElement*, std::string, const rs::Pos&, const rs::Pos&, const rs::Vec&, int);
			void setObstacle(tinyxml2::XMLElement*, std::string, const rs::Pos&, const rs::Quat&, const rs::Vec&, const rs::Vec&, double);
			void setPreconfig(tinyxml2::XMLElement*, std::string, const rs::Pos&, const rs::Quat&, const rs::Vec&);
			void setRobot(tinyxml2::XMLElement*, std::string, const rs::Pos&, const rs::Quat&, const rs::Vec&, const rs::Vec&);
			void setRobotWheels(tinyxml2::XMLElement*, int, double, int, double);
			void setTrace(bool);
			void setUnits(bool);
			tinyxml2::XMLText* toText(bool);
			tinyxml2::XMLText* toText(int);
			tinyxml2::XMLText* toText(std::string);

		// private data
		private:
			std::string _path;
			tinyxml2::XMLDocument _doc;
	};

} // namespace rsXML

#endif // RSXML_WRITER_

